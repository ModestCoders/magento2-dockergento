#!/usr/bin/env bash
set -euo pipefail

resolve_absolute_dir()
{
    SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      DIR="$( cd -P "$( dirname ${SOURCE} )" && pwd )"
      SOURCE="$(readlink ${SOURCE})"
      [[ ${SOURCE} != /* ]] && SOURCE="${DIR}/${SOURCE}" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    ABSOLUTE_BIN_PATH="$( cd -P "$( dirname ${SOURCE} )" && pwd )"
    ABSOLUTE_PATH="${ABSOLUTE_BIN_PATH}/.."
}

init_dirs()
{
    resolve_absolute_dir
    export DOCKERGENTO_DIR="${ABSOLUTE_PATH}"
    export COMMANDS_DIR="${ABSOLUTE_PATH}/console/commands"
    export CONFIG_DIR="${ABSOLUTE_PATH}/config"
    export TASKS_DIR="${ABSOLUTE_PATH}/console/tasks"
    export PROPERTIES_DIR="${ABSOLUTE_PATH}/console/properties"
}

usage()
{
    printf "${YELLOW}Usage:${COLOR_RESET}\n"
    echo "  [options] command [arguments]"
    echo ""
    printf "${YELLOW}Options:${COLOR_RESET}\n"
    printf "  ${GREEN}--help${COLOR_RESET}    Display this help message\n"
    printf "  ${GREEN}-T${COLOR_RESET}        Disable pseudo-tty allocation\n"
    echo ""
    printf "${YELLOW}Commands Help:${COLOR_RESET}\n"
    printf "  ${GREEN}dockergento <command> --help${COLOR_RESET}    Display help for a specific command\n"
    echo ""
    printf "${YELLOW}Available commands:${COLOR_RESET}\n"
	COMMANDS_OUTPUT=""
	for script in "${COMMANDS_DIR}"/*
	do
	    COMMAND_BASENAME=$(basename ${script})
	    COMMAND_NAME=${COMMAND_BASENAME%.sh}
	    COMMAND_DESC_PROPERTY="command_desc_${COMMAND_NAME//-/_}"
	    COMMAND_DESC="${!COMMAND_DESC_PROPERTY:-}"
	    COMMAND_OUTPUT=$(printf "  ${GREEN}%-30s${COLOR_RESET} %s" "${COMMAND_NAME}" "${COMMAND_DESC}")
	    COMMANDS_OUTPUT="${COMMANDS_OUTPUT}${COMMAND_OUTPUT}\n"
	done
    printf "${COMMANDS_OUTPUT}"
}

init_dirs
source ${TASKS_DIR}/load_properties.sh
source ${PROPERTIES_DIR}/command_descriptions

if [ "$#" == 0 ] || [ "$1" == "--help" ]; then
  usage
  exit 0
fi

export TTY_DISABLE=${TTY_DISABLE:=false}
if [ "$1" == "-T" ]; then
    shift
    TTY_DISABLE=true
fi

COMMAND_NAME="$1.sh"
if [ ! -f ${COMMANDS_DIR}/${COMMAND_NAME} ]; then
    printf "${RED}Command not found${COLOR_RESET}\n"
    printf " Execute ${GREEN}dockergento --help${COLOR_RESET} to see commands available\n"
    exit 1
fi

source ${TASKS_DIR}/set_machine_specific_properties.sh

if [[ ! -z "${COMPOSE_PROJECT_NAME+}" ]]; then
    export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME}"
fi

export DOCKER_COMPOSE="docker-compose -f ${DOCKER_COMPOSE_FILE} -f ${DOCKER_COMPOSE_FILE_MACHINE}"

if [[ "$1" != "setup" && "$1" != "docker-stop-all" && "$1" != "docker-remove-all" ]]; then
    ${TASKS_DIR}/validate_docker_compose.sh
fi

shift
${COMMANDS_DIR}/${COMMAND_NAME} "$@"
